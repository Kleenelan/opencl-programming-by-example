#ifndef JPEG_DECODER_KERNELS_H
#define JPEG_DECODER_KERNELS_H
const char *JPEG_Decoder_kernel = 
"/*                                                                                                                                                             \n"
" *  Calculates the naive matrix multiplication using the local memory                                                                                          \n"
" *  loads the blocks along the common dimension to local memories                                                                                              \n"
" *  performs naive matrix multiplication on the blocks that are loaded                                                                                         \n"
" *                                                                                                                                                             \n"
" */                                                                                                                                                            \n"
"                                                                                                                                                               \n"
"#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable                                                                                                \n"
"                                                                                                                                                               \n"
"void Idct(const short  *pSrc, unsigned char *pDst)                                                                                                             \n"
"{                                                                                                                                                              \n"
"	int i, j, k, l;                                                                                                                                             \n"
"	float partialProduct;                                                                                                                                       \n"
"	float tmp[64];                                                                                                                                              \n"
"    const float c[8][8] = {                                                                                                                                    \n"
"    { 0.35355338F,      0.35355338F,      0.35355338F,      0.35355338F,      0.35355338F,      0.35355338F,      0.35355338F,      0.35355338F },             \n"
"    {0.49039263F,      0.41573480F,      0.27778512F,     0.097545162F,    -0.097545162F,     -0.27778512F,     -0.41573480F,     -0.49039263F },              \n"
"    {0.46193975F,     0.19134171F,     -0.19134171F,     -0.46193975F,     -0.46193975F,     -0.19134171F,      0.19134171F,      0.46193975F },               \n"
"    {0.41573480F,    -0.097545162F,     -0.49039263F,     -0.27778512F,      0.27778512F,      0.49039263F,     0.097545162F,     -0.41573480F },              \n"
"    {0.35355338F,     -0.35355338F,     -0.35355338F,      0.35355338F,      0.35355338F,     -0.35355338F,     -0.35355338F,      0.35355338F },              \n"
"    {0.27778512F,     -0.49039263F,     0.097545162F,      0.41573480F,     -0.41573480F,    -0.097545162F,      0.49039263F,     -0.27778512F },              \n"
"    {0.19134171F,     -0.46193975F,      0.46193975F,     -0.19134171F,     -0.19134171F,      0.46193975F,     -0.46193975F,      0.19134171F },              \n"
"    {0.097545162F,     -0.27778512F,      0.41573480F,     -0.49039263F,      0.49039263F,     -0.41573480F,      0.27778512F,    -0.097545162F}               \n"
" };                                                                                                                                                            \n"
"                                                                                                                                                               \n"
"	for (i=0; i<8; i++)                                                                                                                                         \n"
"		for (j=0; j<8; j++)                                                                                                                                     \n"
"		{                                                                                                                                                       \n"
"			partialProduct = 0.0F;                                                                                                                              \n"
"                                                                                                                                                               \n"
"			for (k=0; k<8; k++)                                                                                                                                 \n"
"				partialProduct+= c[k][j]*pSrc[8*i+k];                                                                                                           \n"
"                                                                                                                                                               \n"
"			tmp[8*i+j] = partialProduct;                                                                                                                        \n"
"		}                                                                                                                                                       \n"
"                                                                                                                                                               \n"
"		// Transpose operation is integrated into address mapping by switching                                                                                  \n"
"		// loop order of i and j                                                                                                                                \n"
"                                                                                                                                                               \n"
"		for (j=0; j<8; j++)                                                                                                                                     \n"
"			for (i=0; i<8; i++)                                                                                                                                 \n"
"			{                                                                                                                                                   \n"
"				partialProduct = 0.0F;                                                                                                                          \n"
"                                                                                                                                                               \n"
"				for (k=0; k<8; k++)                                                                                                                             \n"
"					partialProduct+= c[k][i]*tmp[8*k+j];                                                                                                        \n"
"				                                                                                                                                                \n"
"				l = (int)(partialProduct+0.5F);                                                                                                                 \n"
"				l = l+ 128;                                                                                                                                     \n"
"				if(l < 0)                                                                                                                                       \n"
"					l = 0;                                                                                                                                      \n"
"				if(l > 255)                                                                                                                                     \n"
"					l = 255;                                                                                                                                    \n"
"				pDst[8*i+j] = l;                                                                                                                                \n"
"			}                                                                                                                                                   \n"
"}                                                                                                                                                              \n"
"                                                                                                                                                               \n"
"void                                                                                                                                                           \n"
"DCTQuantInv8x8LS_JPEG_16s8u(__global short int *pSrc, unsigned char *pDst, int dstStp, __global unsigned short *pQuantInvTable)                                \n"
"{                                                                                                                                                              \n"
"		int q, i, j;                                                                                                                                            \n"
"	    short int ppSrc[64];                                                                                                                                    \n"
"		for(i=0; i<8; i++) {                                                                                                                                    \n"
"		  for(j=0; j<8; j++) {                                                                                                                                  \n"
"		 	q = pQuantInvTable[8*i+j];                                                                                                                          \n"
"			*(ppSrc+i*8+j) = (short)(*(pSrc+i*8+j)*q);                                                                                                          \n"
"			}                                                                                                                                                   \n"
"		}                                                                                                                                                       \n"
"                                                                                                                                                               \n"
"		Idct(ppSrc, pDst);                                                                                                                                      \n"
"}                                                                                                                                                              \n"
"                                                                                                                                                               \n"
"                                                                                                                                                               \n"
"__kernel void                                                                                                                                                  \n"
"JPEGdecoder_MCU(__global short *pMCUdata1,                                                                                                                     \n"
"				__global unsigned short *pQuantTable1,                                                                                                          \n"
"				__global short *pMCUdata2,                                                                                                                      \n"
"				__global unsigned short *pQuantTable2,				                                                                                            \n"
"				__global short *pMCUdata3,                                                                                                                      \n"
"				__global unsigned short *pQuantTable3,                                                                                                          \n"
"                __global unsigned char * output,                                                                                                               \n"
"				const unsigned int width,                                                                                                                       \n"
"				const unsigned int height,                                                                                                                      \n"
"				const unsigned int mcuWidth,                                                                                                                    \n"
"				const unsigned int mcuHeight)                                                                                                                   \n"
"{                                                                                                                                                              \n"
"	                                                                                                                                                            \n"
"	/* get the block ids in both the directions */                                                                                                              \n"
"	int bx = get_global_id(0);                                                                                                                                  \n"
"	int by = get_global_id(1);                                                                                                                                  \n"
"	int tbx = get_global_size(0);                                                                                                                               \n"
"	int tby = get_global_size(1);                                                                                                                               \n"
"	int index = 0;                                                                                                                                              \n"
"	//unsigned char valueY, valueCb, valueCr;                                                                                                                   \n"
"	int imageSize=0;                                                                                                                                            \n"
"	//float tempValue=0.0F;                                                                                                                                     \n"
"                                                                                                                                                               \n"
"	//short int src[64];                                                                                                                                        \n"
"	unsigned char dst[64];                                                                                                                                      \n"
"	__global short *tempPtr1;                                                                                                                                   \n"
"	                                                                                                                                                            \n"
"	/* get the local ids within the block */                                                                                                                    \n"
"                                                                                                                                                               \n"
"	/*4 is a hard coded entry*/                                                                                                                                 \n"
"                                                                                                                                                               \n"
"        /*Y component*/                                                                                                                                        \n"
"        tempPtr1 = pMCUdata1 + by * tbx *(4*64) + (bx * 4 * 64) ;/*This is what is reqd*/                                                                      \n"
"	DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,(pQuantTable1));                                                                                                 \n"
"                                                                                                                                                               \n"
"	for (int i=0;i<8;i++)                                                                                                                                       \n"
"	{                                                                                                                                                           \n"
"		for (int j=0;j<8;j++)                                                                                                                                   \n"
"		{                                                                                                                                                       \n"
"			index = width*by*mcuHeight + bx*mcuWidth + i*width + j;                                                                                             \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"		}                                                                                                                                                       \n"
"	}                                                                                                                                                           \n"
"                                                                                                                                                               \n"
"    tempPtr1 = (pMCUdata1 + by * tbx *(4*64) + (bx * 4 * 64) + (( 0 * 64) +  1 *64));                                                                          \n"
"    DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,pQuantTable1);                                                                                                  \n"
"	for (int i=0;i<8;i++)                                                                                                                                       \n"
"	{                                                                                                                                                           \n"
"		for (int j=0;j<8;j++)                                                                                                                                   \n"
"		{	                                                                                                                                                    \n"
"			index = (width*by*mcuHeight) + (bx*mcuWidth + 8) + i*width + j;                                                                                     \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"		}	                                                                                                                                                    \n"
"	}                                                                                                                                                           \n"
"                                                                                                                                                               \n"
"    tempPtr1 = pMCUdata1 + by * tbx *(4*64) + (bx * 4 * 64) + (( 2 * 64) +  0 *64);                                                                            \n"
"    DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,pQuantTable1);                                                                                                  \n"
"	for (int i=0;i<8;i++)                                                                                                                                       \n"
"	{                                                                                                                                                           \n"
"		for (int j=0;j<8;j++)                                                                                                                                   \n"
"		{                                                                                                                                                       \n"
"			index = (width*by*mcuHeight) + (bx*mcuWidth) + (i+8)*width + j;                                                                                     \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"		}                                                                                                                                                       \n"
"	}                                                                                                                                                           \n"
"                                                                                                                                                               \n"
"    tempPtr1 = pMCUdata1 + by * tbx *(4*64) + (bx * 4 * 64) + (( 2 * 64) +  1 *64);                                                                            \n"
"    DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,pQuantTable1);                                                                                                  \n"
"	for (int i=0;i<8;i++)                                                                                                                                       \n"
"	{                                                                                                                                                           \n"
"		for (int j=0;j<8;j++)                                                                                                                                   \n"
"		{                                                                                                                                                       \n"
"			index = (width*by*mcuHeight) + (bx*mcuWidth + 8) + (i+8)*width + j;                                                                                 \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"		}                                                                                                                                                       \n"
"	}                                                                                                                                                           \n"
"                                                                                                                                                               \n"
"    /*Cb component*/                                                                                                                                           \n"
"	//pMCUdata2[65536] = 0;                                                                                                                                     \n"
"                                                                                                                                                               \n"
"    tempPtr1 = pMCUdata2 + by * tbx *(1*64) + (bx * 1 * 64);                                                                                                   \n"
"    DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,pQuantTable2);                                                                                                  \n"
"                                                                                                                                                               \n"
"	imageSize = (width * height);                                                                                                                               \n"
"	for (int i=0;i<8;i++)                                                                                                                                       \n"
"	{                                                                                                                                                           \n"
"		for (int j=0;j<8;j++)                                                                                                                                   \n"
"		{	                                                                                                                                                    \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + 2*i*width + 2*j ;                                                                            \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + 2*i*width + 2*j + 1;                                                                         \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + (2*i + 1)*width + 2*j;                                                                       \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + (2*i + 1)*width + 2*j + 1;                                                                   \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"		}	                                                                                                                                                    \n"
"	}                                                                                                                                                           \n"
"                                                                                                                                                               \n"
"    /*Cr component*/                                                                                                                                           \n"
"    tempPtr1 = pMCUdata3 + by * tbx *(1*64) + (bx * 1 * 64);                                                                                                   \n"
"    DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,pQuantTable3);                                                                                                  \n"
"	imageSize = 2*(width * height);                                                                                                                             \n"
"	for (int i=0;i<8;i++)                                                                                                                                       \n"
"	{                                                                                                                                                           \n"
"		for (int j=0;j<8;j++)                                                                                                                                   \n"
"		{	                                                                                                                                                    \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + 2*i*width + 2*j ;                                                                            \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + 2*i*width + 2*j + 1;                                                                         \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + (2*i + 1)* width + 2*j;                                                                      \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"			index = imageSize + width*by*mcuHeight + bx*mcuWidth + (2*i + 1)* width + 2*j + 1;                                                                  \n"
"			output[index] = dst[i*8 + j];                                                                                                                       \n"
"		}                                                                                                                                                       \n"
"	}                                                                                                                                                           \n"
"	                                                                                                                                                            \n"
"	/*for(int i=0;i<8;i++)                                                                                                                                      \n"
"	{                                                                                                                                                           \n"
"		for(int j=0;j<8;j++)                                                                                                                                    \n"
"		{                                                                                                                                                       \n"
"			index = width*by*mcuHeight + bx*mcuWidth + i*width + j;                                                                                             \n"
"			valueY = output[index];                                                                                                                             \n"
"			index += (width * height) ;                                                                                                                         \n"
"			valueCb = output[index];                                                                                                                            \n"
"			index += (width * height);                                                                                                                          \n"
"			valueCr = output[index];                                                                                                                            \n"
"			                                                                                                                                                    \n"
"                                                                                                                                                               \n"
"		}                                                                                                                                                       \n"
"	}*/                                                                                                                                                         \n"
"	barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                               \n"
"		                                                                                                                                                        \n"
"	                                                                                                                                                            \n"
"	/* write the accumulator to the output */                                                                                                                   \n"
"                                                                                                                                                               \n"
"}                                                                                                                                                              \n"
"                                                                                                                                                               \n"
"                                                                                                                                                               \n"
"                                                                                                                                                               \n"
"                                                                                                                                                               \n"
"__kernel void                                                                                                                                                  \n"
"JPEGdecoder_Reference(__global short *pMCUdata1,                                                                                                               \n"
"				__global unsigned short *pQuantTable1,                                                                                                          \n"
"				__global short *pMCUdata2,                                                                                                                      \n"
"				__global unsigned short *pQuantTable2,			                                                                                                \n"
"				__global short *pMCUdata3,                                                                                                                      \n"
"				__global unsigned short *pQuantTable3,                                                                                                          \n"
"                __global unsigned char * output,                                                                                                               \n"
"				const unsigned int width,                                                                                                                       \n"
"				const unsigned int height,                                                                                                                      \n"
"				const unsigned int mcuWidth,                                                                                                                    \n"
"				const unsigned int mcuHeight)                                                                                                                   \n"
"                                                                                                                                                               \n"
"{                                                                                                                                                              \n"
"	int noOfxMCU = width/mcuWidth;                                                                                                                              \n"
"	int noOfyMCU = height/mcuHeight;                                                                                                                            \n"
"	int noOfComponents=3;                                                                                                                                       \n"
"	int verticalSamplingFactor[3] = {2,1,1};                                                                                                                    \n"
"	int horizontalSamplingFactor[3] = {2,1,1};                                                                                                                  \n"
"	int noOfMCUComponent;                                                                                                                                       \n"
"	unsigned char dst[64];                                                                                                                                      \n"
"	__global short *tempPtr1;                                                                                                                                   \n"
"	__global short *pMCUdata[3] = {pMCUdata1,pMCUdata2,pMCUdata3};                                                                                              \n"
"	__global unsigned short *pQuantTable[3] = {pQuantTable1,pQuantTable2,pQuantTable3};                                                                         \n"
"	int index = 0;                                                                                                                                              \n"
"                                                                                                                                                               \n"
"	for(int i=0;i<noOfComponents;i++)                                                                                                                           \n"
"	{                                                                                                                                                           \n"
"		for(int yMCU=0;yMCU<noOfyMCU;yMCU++)                                                                                                                    \n"
"		{                                                                                                                                                       \n"
"			for(int xMCU=0;xMCU<noOfxMCU;xMCU++)                                                                                                                \n"
"			{                                                                                                                                                   \n"
"				for(unsigned int j=0;j<verticalSamplingFactor[i];j++)                                                                                           \n"
"                {                                                                                                                                              \n"
"                    for(unsigned int k=0;k<horizontalSamplingFactor[i];k++)                                                                                    \n"
"                    {                                                                                                                                          \n"
"						noOfMCUComponent = verticalSamplingFactor[i]*horizontalSamplingFactor[i];                                                               \n"
"						tempPtr1 = pMCUdata[i] +                                                                                                                \n"
"									yMCU * noOfxMCU * (noOfMCUComponent*64) +                                                                                   \n"
"									(xMCU * noOfMCUComponent * 64) +                                                                                            \n"
"									(j*verticalSamplingFactor[i] + k)*64;                                                                                       \n"
"						DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,(pQuantTable[i]));                                                                           \n"
"						for (int l=0;l<8;l++)                                                                                                                   \n"
"						{                                                                                                                                       \n"
"							for (int m=0;m<8;m++)                                                                                                               \n"
"							{                                                                                                                                   \n"
"								if (i == 0)                                                                                                                     \n"
"								{                                                                                                                               \n"
"								index = width*yMCU*mcuHeight + xMCU*mcuWidth +                                                                                  \n"
"										j*8*width + k*8 +                                                                                                       \n"
"										l*width + m;                                                                                                            \n"
"								output[index] = dst[l*8 + m];                                                                                                   \n"
"								}                                                                                                                               \n"
"								else                                                                                                                            \n"
"								{                                                                                                                               \n"
"									index = (i*width*height) + width*yMCU*mcuHeight + xMCU*mcuWidth + 2*l*width + 2*m ;                                         \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"									index = (i*width*height) + width*yMCU*mcuHeight + xMCU*mcuWidth + 2*l*width + 2*m + 1;                                      \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"									index = (i*width*height) + width*yMCU*mcuHeight + xMCU*mcuWidth + (2*l + 1)* width + 2*m;                                   \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"									index = (i*width*height) + width*yMCU*mcuHeight + xMCU*mcuWidth + (2*l + 1)* width + 2*m + 1;                               \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"								}                                                                                                                               \n"
"							}                                                                                                                                   \n"
"						}                                                                                                                                       \n"
"					}                                                                                                                                           \n"
"				}                                                                                                                                               \n"
"			}                                                                                                                                                   \n"
"		}                                                                                                                                                       \n"
"	}                                                                                                                                                           \n"
"}                                                                                                                                                              \n"
"                                                                                                                                                               \n"
"                                                                                                                                                               \n"
"__kernel void                                                                                                                                                  \n"
"JPEGdecoder_Devices(__global short *pMCUdata1,                                                                                                                 \n"
"				__global unsigned short *pQuantTable1,                                                                                                          \n"
"				__global short *pMCUdata2,                                                                                                                      \n"
"				__global unsigned short *pQuantTable2,			                                                                                                \n"
"				__global short *pMCUdata3,                                                                                                                      \n"
"				__global unsigned short *pQuantTable3,                                                                                                          \n"
"                __global unsigned char * output,                                                                                                               \n"
"				const unsigned int width,                                                                                                                       \n"
"				const unsigned int height,                                                                                                                      \n"
"				const unsigned int mcuWidth,                                                                                                                    \n"
"				const unsigned int mcuHeight)                                                                                                                   \n"
"                                                                                                                                                               \n"
"{                                                                                                                                                              \n"
"	int noOfxMCU = width/mcuWidth;                                                                                                                              \n"
"	int noOfyMCU = height/mcuHeight;                                                                                                                            \n"
"	int noOfComponents=3;                                                                                                                                       \n"
"	int verticalSamplingFactor[3] = {2,1,1};                                                                                                                    \n"
"	int horizontalSamplingFactor[3] = {2,1,1};                                                                                                                  \n"
"	int noOfMCUComponent;                                                                                                                                       \n"
"	unsigned char dst[64];                                                                                                                                      \n"
"	__global short *tempPtr1;                                                                                                                                   \n"
"	__global short *pMCUdata[3] = {pMCUdata1,pMCUdata2,pMCUdata3};                                                                                              \n"
"	__global unsigned short *pQuantTable[3] = {pQuantTable1,pQuantTable2,pQuantTable3};                                                                         \n"
"	int index = 0;                                                                                                                                              \n"
"	int tby = get_global_size(1);                                                                                                                               \n"
"	int by = get_global_id(1);                                                                                                                                  \n"
"	noOfyMCU = noOfyMCU/tby;                                                                                                                                    \n"
"	for(int i=0;i<noOfComponents;i++)                                                                                                                           \n"
"	{                                                                                                                                                           \n"
"		for(int yMCU=0;yMCU<noOfyMCU;yMCU++)                                                                                                                    \n"
"		{                                                                                                                                                       \n"
"			for(int xMCU=0;xMCU<noOfxMCU;xMCU++)                                                                                                                \n"
"			{                                                                                                                                                   \n"
"				for(unsigned int j=0;j<verticalSamplingFactor[i];j++)                                                                                           \n"
"                {                                                                                                                                              \n"
"                    for(unsigned int k=0;k<horizontalSamplingFactor[i];k++)                                                                                    \n"
"                    {                                                                                                                                          \n"
"						noOfMCUComponent = verticalSamplingFactor[i]*horizontalSamplingFactor[i];                                                               \n"
"						tempPtr1 = pMCUdata[i] + noOfxMCU * by *noOfyMCU* (noOfMCUComponent*64)+                                                                \n"
"									yMCU * noOfxMCU * (noOfMCUComponent*64) +                                                                                   \n"
"									(xMCU * noOfMCUComponent * 64) +                                                                                            \n"
"									(j*verticalSamplingFactor[i] + k)*64;                                                                                       \n"
"						DCTQuantInv8x8LS_JPEG_16s8u(tempPtr1,dst,8,(pQuantTable[i]));                                                                           \n"
"						for (int l=0;l<8;l++)                                                                                                                   \n"
"						{                                                                                                                                       \n"
"							for (int m=0;m<8;m++)                                                                                                               \n"
"							{                                                                                                                                   \n"
"								if (i == 0)                                                                                                                     \n"
"								{                                                                                                                               \n"
"									index = by * noOfyMCU*width*mcuHeight +  width*yMCU*mcuHeight + xMCU*mcuWidth +                                             \n"
"											j*8*width + k*8 +                                                                                                   \n"
"											l*width + m;                                                                                                        \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"								}                                                                                                                               \n"
"								else                                                                                                                            \n"
"								{                                                                                                                               \n"
"									index = (i*width*height) + by*noOfyMCU*width*mcuHeight + width*yMCU*mcuHeight + xMCU*mcuWidth + 2*l*width + 2*m ;           \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"									index = (i*width*height) + by*noOfyMCU*width*mcuHeight + width*yMCU*mcuHeight + xMCU*mcuWidth + 2*l*width + 2*m + 1;        \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"									index = (i*width*height) + by*noOfyMCU*width*mcuHeight + width*yMCU*mcuHeight + xMCU*mcuWidth + (2*l + 1)* width + 2*m;     \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"									index = (i*width*height) + by*noOfyMCU*width*mcuHeight + width*yMCU*mcuHeight + xMCU*mcuWidth + (2*l + 1)* width + 2*m + 1; \n"
"									output[index] = dst[l*8 + m];                                                                                               \n"
"								}                                                                                                                               \n"
"							}                                                                                                                                   \n"
"						}                                                                                                                                       \n"
"					}                                                                                                                                           \n"
"				}                                                                                                                                               \n"
"			}                                                                                                                                                   \n"
"		}                                                                                                                                                       \n"
"	}                                                                                                                                                           \n"
"}                                                                                                                                                              \n";

#endif