#ifndef OCL_MEDIAN_KERNEL_H
#define OCL_MEDIAN_KERNEL_H
static const char *median_kernel =
"                                                                                                      \n"
"__constant sampler_t image_sampler = CLK_NORMALIZED_COORDS_FALSE                                      \n"
"                                     | CLK_ADDRESS_CLAMP_TO_EDGE                                      \n"
"                                     | CLK_FILTER_NEAREST;                                            \n"
"                                                                                                      \n"
"__kernel void median_filter_kernel(__read_only image2d_t in_image,                                     \n"
"                            __write_only image2d_t out_image,                                          \n"
"                            int windowSize)                                                            \n"
"{                                                                                                      \n"                
"    unsigned int x = get_global_id(0);                                                                 \n"                
"    unsigned int y = get_global_id(1);                                                                 \n"                
"    int halfWindow = windowSize/2;                                                                     \n"                
"    float4 pixelValue;                                                                                 \n"
"    int i, j, ifilter, jfilter;                                                                        \n"
"    float oldPixels[9]; float tmp;                                                                     \n"
"    int index =0;                                                                                      \n"
"    //Load the window in oldPixels                                                                     \n"
"    for(i=-halfWindow, ifilter=0; i<=halfWindow; i++, ifilter++){                                      \n"
"       for(j=-halfWindow, jfilter=0; j<=halfWindow; j++, jfilter++){                                   \n"  
"           pixelValue = read_imagef(in_image, image_sampler, (int2)(x+i, y+j));                        \n"
"           oldPixels[index] = pixelValue.x;                                                            \n"
"           index++;                                                                                    \n"
"       }                                                                                               \n"
"    }                                                                                                  \n"
"                                                                                                       \n"
"    // Find the rank-th element                                                                        \n"
"    int totalNumber = windowSize*windowSize;                                                           \n"
"    int rank = totalNumber/2 +1;                                                                       \n"
"    for(int i=0; i< rank;++i)                                                                          \n"
"    {                                                                                                  \n"
"        for(int j=0; j< totalNumber-1 ; ++j)                                                           \n"
"        {                                                                                              \n"
"            if(oldPixels[j] > oldPixels[j+1])                                                          \n"
"            {                                                                                          \n"
"                tmp = oldPixels[j];                                                                    \n"
"                oldPixels[j] = oldPixels[j+1];                                                         \n"
"                oldPixels[j+1] = tmp;                                                                  \n"
"            }                                                                                          \n"
"        }                                                                                              \n"
"        totalNumber--;                                                                                 \n"
"    }                                                                                                  \n"
"                                                                                                       \n"
"    //median is oldPixels[rank], update                                                                \n"
"    pixelValue.x = oldPixels[rank];                                                                    \n"
"                                                                                                       \n"
"                                                                                                       \n"
"    write_imagef(out_image, (int2)(x, y), pixelValue);                                                 \n"
"}                                                                                                      \n";

#endif